version: 2.1

orbs:
    aws-cli: circleci/aws-cli@1.3.0

commands:
  destroy-environment:
    description: Destroy backend and frontend stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "revert migrations begins..."
            SUCCESS=$(curl --insecure  https://kvdb.io/6DAD3tgwZKcRcHPzDTwNhb/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend   
              npm install       
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build
          command: |
            cd backend
            npm install
            npm run test    
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-build
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-build
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].{public_ip:PublicIpAddress}" --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            echo $BACKEND_IP > .circleci/ansible/backend_host.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/backend_host.txt
         
              
  configure-infrastructure:
    docker:
      - image: centos:centos7
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y epel-release
            yum install -y tar gzip ansible
      - attach_workspace:
          name: Attach Workspace
          at: ~/
      
      - add_ssh_keys:
          name: Add ssh keys with fingerprint
          fingerprints:
            - "60:61:db:e9:5c:85:63:45:5f:1e:86:76:a1:ed:81:cf"

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment
      - revert-migrations


  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            sudo apt-get update && sudo apt-get install -y awscli curl
      - run:
          name: Run migrations
          command: |
            cd backend && npm install && npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/6DAD3tgwZKcRcHPzDTwNhb/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi


  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         working_directory: ./backend
  #         command: |
  #           npm install
  #           npm run build
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration results to KVDB.io
  #         working_directory: ./backend
  #         command: |
  #           echo "insecure" >> ~/.curlrc
  #           if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
  #           then
  #             echo "DB migration was successful, will update KVDB..."
  #             curl https://kvdb.io/6DAD3tgwZKcRcHPzDTwNhb/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           else
  #             echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
  #             curl https://kvdb.io/6DAD3tgwZKcRcHPzDTwNhb/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
  #           fi
  #           echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum install -y tar gzip
            yum install -y unzip     

      - run:
          name: Install dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            npm install -g npm
            npm install oauth2
            npm install webpack
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - run:
          name: delete s3 bucket
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations
      
  deploy-backend:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["60:61:db:e9:5c:85:63:45:5f:1e:86:76:a1:ed:81:cf"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip3 install ansible awscli ansible-modules-pm2
            sudo apt-get install -y tar gzip curl
            curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
            sudo apt-get install -y nodejs build-essential

  
      - run:
          name: Deploy backend
          command: |
              cd backend
              npm install
              npm run build
              echo build successful

      - run:
          name: Add env vars
          command: |
              echo ENVIRONMENT=production >> "backend/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
      - run:
          name: Configure server
          command: |    
              tar -C backend -czvf artifact.tar.gz .
              mkdir .circleci/ansible/roles/deploy/files
              mv artifact.tar.gz .circleci/ansible/roles/deploy/files
              cd .circleci/ansible
      - run:
          name: Run Ansible
          command: |
            cd .circleci/ansible
              echo "Contents  of the inventory.txt file is _____________________________________>>"
              cat inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook deploy-backend.yml -i inventory.txt               
      - destroy-environment
      - revert-migrations           
      
      
  smoke-test:
    docker:
      - image: circleci/node:14.18.1 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y curl
            sudo apt install -y awscli
            sudo apt install -y nodejs
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo SUCCESS
              exit 0
            else
              echo FAIL
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo SUCCESS
              exit 0
            else
              echo FAIL
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --region us-west-2 --no-paginate --output text)
            echo $OldWorkflowID > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
                        
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            
      - attach_workspace:
          at: ~/      
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID:"${OldWorkflowID}"
            
            export CurrentWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo CurrentWorkflowID:"${CurrentWorkflowID}"
            
            echo "udapeople-${OldWorkflowID}"
            echo "udapeople-backend-${OldWorkflowID}"
            echo "udapeople-frontend-${OldWorkflowID}"
            
            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
                echo "i am in."
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
             else
                echo "i am out."
            fi 
      - destroy-environment
      - revert-migrations   
    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend: 
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations, deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

      
